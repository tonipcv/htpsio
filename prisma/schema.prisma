generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:899c8f829724285bcfaf@dpbdp1.easypanel.host:32130/servidor?sslmode=disable"
}

model User {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  password        String
  slug            String        @unique
  role            String        @default("admin") // "admin" ou "client"
  adminId         String?       // ID do admin que cadastrou o cliente (null para admins)
  createdAt       DateTime      @default(now())
  image           String?
  plan            String?       @default("free")
  isPremium       Boolean       @default(false)
  acronisTenantId String?
  tenantId        String?
  resetToken      String?       // Token for password reset/creation
  resetTokenExpiry DateTime?    // Expiry time for reset token
  devices         Device[]
  pages           Page[]
  subscription    Subscription?
  tenant          Tenant?       @relation(fields: [tenantId], references: [id])
  documents       Document[]
  documentDownloads DocumentDownload[]
  
  // Relacionamentos para o sistema de clientes
  clients         User[]        @relation("AdminClient")
  admin           User?         @relation("AdminClient", fields: [adminId], references: [id])
  documentAccess  DocumentAccess[]
  grantedAccess   DocumentAccess[] @relation("GrantedBy")

  @@index([tenantId])
  @@index([adminId])
  @@index([role])
  @@map("users")
}

model Tenant {
  id               String            @id @default(cuid())
  name             String
  slug             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  acronisTenantId  String?
  activationStatus ActivationStatus?
  installer        Installer?
  protectionStatus ProtectionStatus?
  users            User[]
}

model ActivationStatus {
  id                    String    @id @default(uuid())
  tenantId              String    @unique
  installerDownloaded   Boolean   @default(false)
  installerDownloadedAt DateTime?
  deviceInstalled       Boolean   @default(false)
  deviceInstalledAt     DateTime?
  emailVerified         Boolean   @default(false)
  emailVerifiedAt       DateTime?
  wizardCompleted       Boolean   @default(false)
  wizardCompletedAt     DateTime?
  currentStep           String    @default("DOWNLOAD_INSTALLER")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  tenant                Tenant    @relation(fields: [tenantId], references: [id])
}

model Installer {
  id            String   @id @default(uuid())
  tenantId      String   @unique
  url           String
  os            String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  brandingColor String?
  brandingLogo  String?
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
}

model ProtectionStatus {
  id              String    @id @default(uuid())
  tenantId        String    @unique
  endpointOk      Boolean   @default(false)
  endpointMessage String?
  emailOk         Boolean   @default(false)
  emailMessage    String?
  backupOk        Boolean   @default(false)
  backupMessage   String?
  lastUpdated     DateTime  @default(now())
  nextCheckAt     DateTime?
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
}

model Device {
  id         String           @id @default(cuid())
  externalId String           @unique
  tenantId   String
  userId     String
  name       String
  os         String
  status     String
  lastSeen   DateTime
  version    String?
  isIsolated Boolean          @default(false)
  ipAddress  String?
  macAddress String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  user       User             @relation(fields: [userId], references: [id])
  actions    SecurityAction[]

  @@unique([externalId, tenantId])
  @@index([userId])
}

model Page {
  id           String       @id @default(uuid())
  title        String
  subtitle     String?
  slug         String
  avatarUrl    String?
  primaryColor String       @default("#000000")
  layout       String       @default("classic")
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  blocks       PageBlock[]
  socialLinks  SocialLink[]

  @@unique([userId, slug])
}

model PageBlock {
  id        String   @id @default(uuid())
  type      String
  content   String
  order     Int      @default(0)
  pageId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String
  url       String
  pageId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model SecurityAction {
  id        String   @id @default(uuid())
  userId    String
  deviceId  String
  action    String
  reason    String?
  status    String
  timestamp DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id])

  @@index([userId])
  @@index([deviceId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  plan      String   @default("free")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Document {
  id          String            @id @default(uuid())
  name        String
  mimeType    String
  size        Int
  s3Key       String            @unique
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  downloads   DocumentDownload[]
  user        User              @relation(fields: [userId], references: [id])
  documentAccess  DocumentAccess[]

  @@index([userId])
}

model DocumentDownload {
  id            String   @id @default(uuid())
  documentId    String
  userId        String
  watermarkKey  String   @unique  // S3 key for watermarked version
  downloadedAt  DateTime @default(now())
  ipAddress     String?
  userAgent     String?
  document      Document @relation(fields: [documentId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([documentId])
  @@index([userId])
}

model DocumentAccess {
  id           String    @id @default(uuid())
  documentId   String
  clientId     String    // ID do cliente (User com role="client")
  grantedAt    DateTime  @default(now())
  grantedBy    String    // ID do admin que concedeu acesso
  document     Document  @relation(fields: [documentId], references: [id])
  client       User      @relation(fields: [clientId], references: [id])
  admin        User      @relation("GrantedBy", fields: [grantedBy], references: [id])

  @@unique([documentId, clientId])
  @@index([documentId])
  @@index([clientId])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  slug            String    @unique
  createdAt       DateTime  @default(now())
  image           String?
  plan            String?   @default("free")
  isPremium       Boolean   @default(false)
  acronisTenantId String?
  subscription    Subscription?
  devices         Device[]
  tenantId        String?
  tenant          Tenant?   @relation(fields: [tenantId], references: [id])
  pages           Page[]

  @@index([tenantId])
  @@map("users")
}

model Tenant {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  users            User[]
  acronisTenantId  String?
}

model ActivationStatus {
  id                    String   @id @default(uuid())
  tenantId             String   @unique
  tenant               Tenant   @relation(fields: [tenantId], references: [id])
  
  // Wizard Steps
  installerDownloaded  Boolean  @default(false)
  installerDownloadedAt DateTime?
  
  deviceInstalled      Boolean  @default(false)
  deviceInstalledAt    DateTime?
  
  emailVerified        Boolean  @default(false)
  emailVerifiedAt      DateTime?
  
  wizardCompleted      Boolean  @default(false)
  wizardCompletedAt    DateTime?
  
  currentStep          String   @default("DOWNLOAD_INSTALLER") // DOWNLOAD_INSTALLER, INSTALL_DEVICE, VERIFY_EMAIL, COMPLETED
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Installer {
  id         String   @id @default(uuid())
  tenantId   String   @unique
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  url        String
  os         String   // 'windows' | 'mac'
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  
  // Customização
  brandingColor String? // Cor principal da marca
  brandingLogo  String? // URL do logo da empresa
}

model ProtectionStatus {
  id            String   @id @default(uuid())
  tenantId      String   @unique
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  // Status detalhado dos serviços
  endpointOk    Boolean  @default(false)
  endpointMessage String? // Ex: "Seu computador está protegido" ou "Antivírus desatualizado"
  
  emailOk       Boolean  @default(false)
  emailMessage  String?  // Ex: "Email protegido contra ameaças" ou "Proteção de email não configurada"
  
  backupOk      Boolean  @default(false)
  backupMessage String?  // Ex: "Seus arquivos estão seguros" ou "Backup desativado"
  
  lastUpdated   DateTime @default(now())
  nextCheckAt   DateTime? // Próxima verificação agendada
}

model Device {
  id          String    @id @default(cuid())
  externalId  String    @unique
  tenantId    String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  os          String
  status      String
  lastSeen    DateTime
  version     String?
  isIsolated  Boolean   @default(false)
  ipAddress   String?
  macAddress  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  actions     SecurityAction[]

  @@unique([externalId, tenantId])
  @@index([userId])
}

model Page {
  id           String   @id @default(uuid())
  title        String
  subtitle     String?
  slug         String
  avatarUrl    String?
  primaryColor String   @default("#000000")
  layout       String   @default("classic")
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  blocks       PageBlock[]
  socialLinks  SocialLink[]

  @@unique([userId, slug])
}

model PageBlock {
  id        String   @id @default(uuid())
  type      String
  content   String
  order     Int      @default(0)
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String
  url       String
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecurityAction {
  id        String   @id @default(uuid())
  userId    String
  deviceId  String
  device    Device   @relation(fields: [deviceId], references: [id])
  action    String   // 'isolate', 'restore', 'scan', etc.
  reason    String?
  status    String   // 'pending', 'completed', 'failed'
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([deviceId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  plan      String   @default("free")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
